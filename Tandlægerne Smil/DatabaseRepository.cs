

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
// 
// Do not make changes directly to this file - edit the template instead.
// 
// The following connection settings were used to generate this file:
//     Configuration file:     "Tandlægerne Smil\App.config"
//     Connection String Name: "smildbConnectionString"
//     Connection String:      "Data Source=smildb.cte2kcycmwsl.eu-central-1.rds.amazonaws.com;Initial Catalog=smildb;Persist Security Info=True;User ID=smilbruger;password=**zapped**;"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace Tandlægerne_Smil
{
    using System.Linq;

    // ************************************************************************
    // Unit of work
    public interface Ismildb : System.IDisposable
    {
        System.Data.Entity.DbSet<Ansat> Ansats { get; set; } // Ansat
        System.Data.Entity.DbSet<Behandling> Behandlings { get; set; } // Behandling
        System.Data.Entity.DbSet<Behandlingsrum> Behandlingsrums { get; set; } // Behandlingsrum
        System.Data.Entity.DbSet<Booking> Bookings { get; set; } // Booking
        System.Data.Entity.DbSet<Faktura> Fakturas { get; set; } // Faktura
        System.Data.Entity.DbSet<Fakturalinjer> Fakturalinjers { get; set; } // Fakturalinjer
        System.Data.Entity.DbSet<Patient> Patients { get; set; } // Patient
        System.Data.Entity.DbSet<Postnummer> Postnummers { get; set; } // Postnummer
        System.Data.Entity.DbSet<Stilling> Stillings { get; set; } // Stilling
        System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; } // sysdiagrams
        System.Data.Entity.DbSet<Udstyr> Udstyrs { get; set; } // Udstyr
        System.Data.Entity.DbSet<Venteværelse> Venteværelse { get; set; } // Venteværelse

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
    }

    // ************************************************************************
    // Database context
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class smildb : System.Data.Entity.DbContext, Ismildb
    {
        public System.Data.Entity.DbSet<Ansat> Ansats { get; set; } // Ansat
        public System.Data.Entity.DbSet<Behandling> Behandlings { get; set; } // Behandling
        public System.Data.Entity.DbSet<Behandlingsrum> Behandlingsrums { get; set; } // Behandlingsrum
        public System.Data.Entity.DbSet<Booking> Bookings { get; set; } // Booking
        public System.Data.Entity.DbSet<Faktura> Fakturas { get; set; } // Faktura
        public System.Data.Entity.DbSet<Fakturalinjer> Fakturalinjers { get; set; } // Fakturalinjer
        public System.Data.Entity.DbSet<Patient> Patients { get; set; } // Patient
        public System.Data.Entity.DbSet<Postnummer> Postnummers { get; set; } // Postnummer
        public System.Data.Entity.DbSet<Stilling> Stillings { get; set; } // Stilling
        public System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; } // sysdiagrams
        public System.Data.Entity.DbSet<Udstyr> Udstyrs { get; set; } // Udstyr
        public System.Data.Entity.DbSet<Venteværelse> Venteværelse { get; set; } // Venteværelse
        
        static smildb()
        {
            System.Data.Entity.Database.SetInitializer<smildb>(null);
        }

        public smildb()
            : base("Name=smildbConnectionString")
        {
        }

        public smildb(string connectionString)
            : base(connectionString)
        {
        }

        public smildb(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public smildb(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public smildb(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AnsatConfiguration());
            modelBuilder.Configurations.Add(new BehandlingConfiguration());
            modelBuilder.Configurations.Add(new BehandlingsrumConfiguration());
            modelBuilder.Configurations.Add(new BookingConfiguration());
            modelBuilder.Configurations.Add(new FakturaConfiguration());
            modelBuilder.Configurations.Add(new FakturalinjerConfiguration());
            modelBuilder.Configurations.Add(new PatientConfiguration());
            modelBuilder.Configurations.Add(new PostnummerConfiguration());
            modelBuilder.Configurations.Add(new StillingConfiguration());
            modelBuilder.Configurations.Add(new SysdiagramConfiguration());
            modelBuilder.Configurations.Add(new UdstyrConfiguration());
            modelBuilder.Configurations.Add(new VenteværelseConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AnsatConfiguration(schema));
            modelBuilder.Configurations.Add(new BehandlingConfiguration(schema));
            modelBuilder.Configurations.Add(new BehandlingsrumConfiguration(schema));
            modelBuilder.Configurations.Add(new BookingConfiguration(schema));
            modelBuilder.Configurations.Add(new FakturaConfiguration(schema));
            modelBuilder.Configurations.Add(new FakturalinjerConfiguration(schema));
            modelBuilder.Configurations.Add(new PatientConfiguration(schema));
            modelBuilder.Configurations.Add(new PostnummerConfiguration(schema));
            modelBuilder.Configurations.Add(new StillingConfiguration(schema));
            modelBuilder.Configurations.Add(new SysdiagramConfiguration(schema));
            modelBuilder.Configurations.Add(new UdstyrConfiguration(schema));
            modelBuilder.Configurations.Add(new VenteværelseConfiguration(schema));
            return modelBuilder;
        }
    }

    // ************************************************************************
    // Fake Database context
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class Fakesmildb : Ismildb
    {
        public System.Data.Entity.DbSet<Ansat> Ansats { get; set; }
        public System.Data.Entity.DbSet<Behandling> Behandlings { get; set; }
        public System.Data.Entity.DbSet<Behandlingsrum> Behandlingsrums { get; set; }
        public System.Data.Entity.DbSet<Booking> Bookings { get; set; }
        public System.Data.Entity.DbSet<Faktura> Fakturas { get; set; }
        public System.Data.Entity.DbSet<Fakturalinjer> Fakturalinjers { get; set; }
        public System.Data.Entity.DbSet<Patient> Patients { get; set; }
        public System.Data.Entity.DbSet<Postnummer> Postnummers { get; set; }
        public System.Data.Entity.DbSet<Stilling> Stillings { get; set; }
        public System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; }
        public System.Data.Entity.DbSet<Udstyr> Udstyrs { get; set; }
        public System.Data.Entity.DbSet<Venteværelse> Venteværelse { get; set; }

        public Fakesmildb()
        {
            Ansats = new FakeDbSet<Ansat>("AnsatId");
            Behandlings = new FakeDbSet<Behandling>("BehandlingId");
            Behandlingsrums = new FakeDbSet<Behandlingsrum>("RumId");
            Bookings = new FakeDbSet<Booking>("BookingId");
            Fakturas = new FakeDbSet<Faktura>("FakturaId");
            Fakturalinjers = new FakeDbSet<Fakturalinjer>("FakturaId");
            Patients = new FakeDbSet<Patient>("PatientId");
            Postnummers = new FakeDbSet<Postnummer>("Postnr");
            Stillings = new FakeDbSet<Stilling>("StillingId");
            Sysdiagrams = new FakeDbSet<Sysdiagram>("DiagramId");
            Udstyrs = new FakeDbSet<Udstyr>("UdstyrId");
            Venteværelse = new FakeDbSet<Venteværelse>("PatientId");
        }
        
        public int SaveChangesCount { get; private set; } 
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }
        
        public void Dispose()
        {
            Dispose(true);
        }
    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class 
    { 
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;
 
        public FakeDbSet() 
        { 
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>(); 
            _query = _data.AsQueryable(); 
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>(); 
            _query = _data.AsQueryable(); 
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }
        
        public override TEntity Add(TEntity item) 
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Remove(TEntity item) 
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item); 
            return item; 
        } 
 
        public override TEntity Attach(TEntity item) 
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Create() 
        { 
            return System.Activator.CreateInstance<TEntity>(); 
        } 
 
        public override TDerivedEntity Create<TDerivedEntity>() 
        { 
            return System.Activator.CreateInstance<TDerivedEntity>(); 
        } 
 
        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local 
        { 
            get { return _data; } 
        } 
 
        System.Type IQueryable.ElementType
        { 
            get { return _query.ElementType; } 
        } 
 
        System.Linq.Expressions.Expression IQueryable.Expression 
        { 
            get { return _query.Expression; } 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); } 
        } 
 
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator() 
        { 
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator()); 
        }
    } 

    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider 
    { 
        private readonly IQueryProvider _inner; 
 
        public FakeDbAsyncQueryProvider(IQueryProvider inner) 
        { 
            _inner = inner; 
        } 
 
        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TEntity>(expression); 
        } 
 
        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TElement>(expression); 
        } 
 
        public object Execute(System.Linq.Expressions.Expression expression) 
        { 
            return _inner.Execute(expression); 
        } 
 
        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression) 
        { 
            return _inner.Execute<TResult>(expression); 
        } 
 
        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(Execute(expression)); 
        } 
 
        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression)); 
        } 
    } 
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T> 
    { 
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable) 
            : base(enumerable) 
        { } 
 
        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression) 
            : base(expression) 
        { } 
 
        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator() 
        { 
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator()); 
        } 
 
        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator() 
        { 
            return GetAsyncEnumerator(); 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<T>(this); } 
        } 
    } 
 
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> 
    { 
        private readonly System.Collections.Generic.IEnumerator<T> _inner; 
 
        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner) 
        { 
            _inner = inner; 
        } 
 
        public void Dispose() 
        { 
            _inner.Dispose(); 
        } 
 
        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext()); 
        } 
 
        public T Current 
        { 
            get { return _inner.Current; } 
        } 
 
        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current 
        { 
            get { return Current; } 
        } 
    }

    // ************************************************************************
    // POCO classes

    // Ansat
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class Ansat
    {
        public int AnsatId { get; set; } // ansat_id (Primary key)
        public int StillingId { get; set; } // stilling_id
        public string Fornavn { get; set; } // fornavn (length: 20)
        public string Efternavn { get; set; } // efternavn (length: 20)
        public decimal? Løn { get; set; } // løn
        public bool Aktiv { get; set; } // aktiv
        public bool Elev { get; set; } // elev

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Booking> Bookings { get; set; } // Booking.FK_Booking_Ansat

        // Foreign keys
        public virtual Stilling Stilling { get; set; } // FK_Ansat_Stilling
        
        public Ansat()
        {
            Bookings = new System.Collections.Generic.List<Booking>();
        }
    }

    // Behandling
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class Behandling
    {
        public int BehandlingId { get; set; } // behandling_id (Primary key)
        public string Navn { get; set; } // navn (length: 20)
        public decimal? Pris { get; set; } // pris
        public int? AnslåetTid { get; set; } // anslået_tid

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Fakturalinjer> Fakturalinjers { get; set; } // Fakturalinjer.FK_Fakturalinjer_Behandling
        
        public Behandling()
        {
            Fakturalinjers = new System.Collections.Generic.List<Fakturalinjer>();
        }
    }

    // Behandlingsrum
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class Behandlingsrum
    {
        public short RumId { get; set; } // rum_id (Primary key)
        public int UdstyrId { get; set; } // udstyr_id

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Booking> Bookings { get; set; } // Booking.FK_Booking_Behandlingsrum
        public virtual System.Collections.Generic.ICollection<Udstyr> Udstyrs { get; set; } // Udstyr.FK_Udstyr_Behandlingsrum
        
        public Behandlingsrum()
        {
            Bookings = new System.Collections.Generic.List<Booking>();
            Udstyrs = new System.Collections.Generic.List<Udstyr>();
        }
    }

    // Booking
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class Booking
    {
        public int BookingId { get; set; } // booking_id (Primary key)
        public System.DateTime Tidspunkt { get; set; } // tidspunkt
        public short LokaleId { get; set; } // lokale_id
        public int? LægeId { get; set; } // læge_id

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Venteværelse> Venteværelse { get; set; } // Venteværelse.FK_Venteværelse_Booking

        // Foreign keys
        public virtual Ansat Ansat { get; set; } // FK_Booking_Ansat
        public virtual Behandlingsrum Behandlingsrum { get; set; } // FK_Booking_Behandlingsrum
        
        public Booking()
        {
            Venteværelse = new System.Collections.Generic.List<Venteværelse>();
        }
    }

    // Faktura
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class Faktura
    {
        public int FakturaId { get; set; } // faktura_id (Primary key)
        public int PatientId { get; set; } // patient_id
        public bool Betalt { get; set; } // betalt
        public System.DateTime FakturaDato { get; set; } // faktura_dato

        // Foreign keys
        public virtual Fakturalinjer Fakturalinjer { get; set; } // FK_Faktura_Fakturalinjer
        public virtual Patient Patient { get; set; } // FK_Faktura_Patient
    }

    // Fakturalinjer
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class Fakturalinjer
    {
        public int FakturaId { get; set; } // faktura_id (Primary key)
        public int BehandlingId { get; set; } // behandling_id
        public System.DateTime? Tidspunkt { get; set; } // tidspunkt

        // Reverse navigation
        public virtual Faktura Faktura { get; set; } // Faktura.FK_Faktura_Fakturalinjer

        // Foreign keys
        public virtual Behandling Behandling { get; set; } // FK_Fakturalinjer_Behandling
    }

    // Patient
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class Patient
    {
        public int PatientId { get; set; } // patient_id (Primary key)
        public string Fornavn { get; set; } // fornavn (length: 20)
        public string Efternavn { get; set; } // efternavn (length: 20)
        public int Cpr { get; set; } // cpr
        public string Adresse { get; set; } // adresse (length: 50)
        public short Postnummer { get; set; } // postnummer

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Faktura> Fakturas { get; set; } // Faktura.FK_Faktura_Patient
        public virtual Venteværelse Venteværelse { get; set; } // Venteværelse.FK_Venteværelse_Patient

        // Foreign keys
        public virtual Postnummer Postnummer_Postnummer { get; set; } // FK_Patient_Postnummer
        
        public Patient()
        {
            Fakturas = new System.Collections.Generic.List<Faktura>();
        }
    }

    // Postnummer
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class Postnummer
    {
        public short Postnr { get; set; } // postnr (Primary key)
        public string Distrikt { get; set; } // distrikt (length: 24)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Patient> Patients { get; set; } // Patient.FK_Patient_Postnummer
        
        public Postnummer()
        {
            Patients = new System.Collections.Generic.List<Patient>();
        }
    }

    // Stilling
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class Stilling
    {
        public int StillingId { get; set; } // stilling_id (Primary key)
        public string JobTitel { get; set; } // job_titel (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Ansat> Ansats { get; set; } // Ansat.FK_Ansat_Stilling
        
        public Stilling()
        {
            Ansats = new System.Collections.Generic.List<Ansat>();
        }
    }

    // sysdiagrams
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class Sysdiagram
    {
        public string Name { get; set; } // name (length: 128)
        public int PrincipalId { get; set; } // principal_id
        public int DiagramId { get; set; } // diagram_id (Primary key)
        public int? Version { get; set; } // version
        public byte[] Definition { get; set; } // definition
    }

    // Udstyr
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class Udstyr
    {
        public int UdstyrId { get; set; } // udstyr_id (Primary key)
        public string Navn { get; set; } // navn (length: 50)
        public short RumId { get; set; } // rum_id

        // Foreign keys
        public virtual Behandlingsrum Behandlingsrum { get; set; } // FK_Udstyr_Behandlingsrum
    }

    // Venteværelse
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class Venteværelse
    {
        public int PatientId { get; set; } // patient_id (Primary key)
        public int BookingId { get; set; } // booking_id

        // Foreign keys
        public virtual Booking Booking { get; set; } // FK_Venteværelse_Booking
        public virtual Patient Patient { get; set; } // FK_Venteværelse_Patient
    }


    // ************************************************************************
    // POCO Configuration

    // Ansat
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class AnsatConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Ansat>
    {
        public AnsatConfiguration()
            : this("dbo")
        {
        }
 
        public AnsatConfiguration(string schema)
        {
            ToTable(schema + ".Ansat");
            HasKey(x => x.AnsatId);

            Property(x => x.AnsatId).HasColumnName(@"ansat_id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.StillingId).HasColumnName(@"stilling_id").IsRequired().HasColumnType("int");
            Property(x => x.Fornavn).HasColumnName(@"fornavn").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(20);
            Property(x => x.Efternavn).HasColumnName(@"efternavn").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(20);
            Property(x => x.Løn).HasColumnName(@"løn").IsOptional().HasColumnType("decimal");
            Property(x => x.Aktiv).HasColumnName(@"aktiv").IsRequired().HasColumnType("bit");
            Property(x => x.Elev).HasColumnName(@"elev").IsRequired().HasColumnType("bit");

            // Foreign keys
            HasRequired(a => a.Stilling).WithMany(b => b.Ansats).HasForeignKey(c => c.StillingId); // FK_Ansat_Stilling
        }
    }

    // Behandling
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class BehandlingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Behandling>
    {
        public BehandlingConfiguration()
            : this("dbo")
        {
        }
 
        public BehandlingConfiguration(string schema)
        {
            ToTable(schema + ".Behandling");
            HasKey(x => x.BehandlingId);

            Property(x => x.BehandlingId).HasColumnName(@"behandling_id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Navn).HasColumnName(@"navn").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(20);
            Property(x => x.Pris).HasColumnName(@"pris").IsOptional().HasColumnType("decimal");
            Property(x => x.AnslåetTid).HasColumnName(@"anslået_tid").IsOptional().HasColumnType("int");
        }
    }

    // Behandlingsrum
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class BehandlingsrumConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Behandlingsrum>
    {
        public BehandlingsrumConfiguration()
            : this("dbo")
        {
        }
 
        public BehandlingsrumConfiguration(string schema)
        {
            ToTable(schema + ".Behandlingsrum");
            HasKey(x => x.RumId);

            Property(x => x.RumId).HasColumnName(@"rum_id").IsRequired().HasColumnType("smallint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.UdstyrId).HasColumnName(@"udstyr_id").IsRequired().HasColumnType("int");
        }
    }

    // Booking
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class BookingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Booking>
    {
        public BookingConfiguration()
            : this("dbo")
        {
        }
 
        public BookingConfiguration(string schema)
        {
            ToTable(schema + ".Booking");
            HasKey(x => x.BookingId);

            Property(x => x.BookingId).HasColumnName(@"booking_id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Tidspunkt).HasColumnName(@"tidspunkt").IsRequired().HasColumnType("datetime");
            Property(x => x.LokaleId).HasColumnName(@"lokale_id").IsRequired().HasColumnType("smallint");
            Property(x => x.LægeId).HasColumnName(@"læge_id").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.Ansat).WithMany(b => b.Bookings).HasForeignKey(c => c.LægeId); // FK_Booking_Ansat
            HasRequired(a => a.Behandlingsrum).WithMany(b => b.Bookings).HasForeignKey(c => c.LokaleId); // FK_Booking_Behandlingsrum
        }
    }

    // Faktura
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class FakturaConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Faktura>
    {
        public FakturaConfiguration()
            : this("dbo")
        {
        }
 
        public FakturaConfiguration(string schema)
        {
            ToTable(schema + ".Faktura");
            HasKey(x => x.FakturaId);

            Property(x => x.FakturaId).HasColumnName(@"faktura_id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PatientId).HasColumnName(@"patient_id").IsRequired().HasColumnType("int");
            Property(x => x.Betalt).HasColumnName(@"betalt").IsRequired().HasColumnType("bit");
            Property(x => x.FakturaDato).HasColumnName(@"faktura_dato").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Fakturalinjer).WithOptional(b => b.Faktura); // FK_Faktura_Fakturalinjer
            HasRequired(a => a.Patient).WithMany(b => b.Fakturas).HasForeignKey(c => c.PatientId); // FK_Faktura_Patient
        }
    }

    // Fakturalinjer
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class FakturalinjerConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Fakturalinjer>
    {
        public FakturalinjerConfiguration()
            : this("dbo")
        {
        }
 
        public FakturalinjerConfiguration(string schema)
        {
            ToTable(schema + ".Fakturalinjer");
            HasKey(x => x.FakturaId);

            Property(x => x.FakturaId).HasColumnName(@"faktura_id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.BehandlingId).HasColumnName(@"behandling_id").IsRequired().HasColumnType("int");
            Property(x => x.Tidspunkt).HasColumnName(@"tidspunkt").IsOptional().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Behandling).WithMany(b => b.Fakturalinjers).HasForeignKey(c => c.BehandlingId); // FK_Fakturalinjer_Behandling
        }
    }

    // Patient
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class PatientConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Patient>
    {
        public PatientConfiguration()
            : this("dbo")
        {
        }
 
        public PatientConfiguration(string schema)
        {
            ToTable(schema + ".Patient");
            HasKey(x => x.PatientId);

            Property(x => x.PatientId).HasColumnName(@"patient_id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Fornavn).HasColumnName(@"fornavn").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(20);
            Property(x => x.Efternavn).HasColumnName(@"efternavn").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(20);
            Property(x => x.Cpr).HasColumnName(@"cpr").IsRequired().HasColumnType("int");
            Property(x => x.Adresse).HasColumnName(@"adresse").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(50);
            Property(x => x.Postnummer).HasColumnName(@"postnummer").IsRequired().HasColumnType("smallint");

            // Foreign keys
            HasRequired(a => a.Postnummer_Postnummer).WithMany(b => b.Patients).HasForeignKey(c => c.Postnummer); // FK_Patient_Postnummer
        }
    }

    // Postnummer
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class PostnummerConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Postnummer>
    {
        public PostnummerConfiguration()
            : this("dbo")
        {
        }
 
        public PostnummerConfiguration(string schema)
        {
            ToTable(schema + ".Postnummer");
            HasKey(x => x.Postnr);

            Property(x => x.Postnr).HasColumnName(@"postnr").IsRequired().HasColumnType("smallint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Distrikt).HasColumnName(@"distrikt").IsOptional().HasColumnType("nvarchar").HasMaxLength(24);
        }
    }

    // Stilling
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class StillingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Stilling>
    {
        public StillingConfiguration()
            : this("dbo")
        {
        }
 
        public StillingConfiguration(string schema)
        {
            ToTable(schema + ".Stilling");
            HasKey(x => x.StillingId);

            Property(x => x.StillingId).HasColumnName(@"stilling_id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.JobTitel).HasColumnName(@"job_titel").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(50);
        }
    }

    // sysdiagrams
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class SysdiagramConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sysdiagram>
    {
        public SysdiagramConfiguration()
            : this("dbo")
        {
        }
 
        public SysdiagramConfiguration(string schema)
        {
            ToTable(schema + ".sysdiagrams");
            HasKey(x => x.DiagramId);

            Property(x => x.Name).HasColumnName(@"name").IsRequired().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.PrincipalId).HasColumnName(@"principal_id").IsRequired().HasColumnType("int");
            Property(x => x.DiagramId).HasColumnName(@"diagram_id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Version).HasColumnName(@"version").IsOptional().HasColumnType("int");
            Property(x => x.Definition).HasColumnName(@"definition").IsOptional().HasColumnType("varbinary");
        }
    }

    // Udstyr
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class UdstyrConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Udstyr>
    {
        public UdstyrConfiguration()
            : this("dbo")
        {
        }
 
        public UdstyrConfiguration(string schema)
        {
            ToTable(schema + ".Udstyr");
            HasKey(x => x.UdstyrId);

            Property(x => x.UdstyrId).HasColumnName(@"udstyr_id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Navn).HasColumnName(@"navn").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(50);
            Property(x => x.RumId).HasColumnName(@"rum_id").IsRequired().HasColumnType("smallint");

            // Foreign keys
            HasRequired(a => a.Behandlingsrum).WithMany(b => b.Udstyrs).HasForeignKey(c => c.RumId); // FK_Udstyr_Behandlingsrum
        }
    }

    // Venteværelse
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class VenteværelseConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Venteværelse>
    {
        public VenteværelseConfiguration()
            : this("dbo")
        {
        }
 
        public VenteværelseConfiguration(string schema)
        {
            ToTable(schema + ".Venteværelse");
            HasKey(x => x.PatientId);

            Property(x => x.PatientId).HasColumnName(@"patient_id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.BookingId).HasColumnName(@"booking_id").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Booking).WithMany(b => b.Venteværelse).HasForeignKey(c => c.BookingId); // FK_Venteværelse_Booking
            HasRequired(a => a.Patient).WithOptional(b => b.Venteværelse); // FK_Venteværelse_Patient
        }
    }

}
// </auto-generated>

